package uk.co.automatictester.bamboo.specs;

import com.atlassian.bamboo.specs.api.BambooSpec;
import com.atlassian.bamboo.specs.api.builders.BambooKey;
import com.atlassian.bamboo.specs.api.builders.permission.PermissionType;
import com.atlassian.bamboo.specs.api.builders.permission.Permissions;
import com.atlassian.bamboo.specs.api.builders.permission.PlanPermissions;
import com.atlassian.bamboo.specs.api.builders.plan.Job;
import com.atlassian.bamboo.specs.api.builders.plan.Plan;
import com.atlassian.bamboo.specs.api.builders.plan.Stage;
import com.atlassian.bamboo.specs.api.builders.plan.branches.BranchCleanup;
import com.atlassian.bamboo.specs.api.builders.plan.branches.PlanBranchManagement;
import com.atlassian.bamboo.specs.api.builders.project.Project;
import com.atlassian.bamboo.specs.builders.repository.git.GitRepository;
import com.atlassian.bamboo.specs.builders.repository.viewer.GitHubRepositoryViewer;
import com.atlassian.bamboo.specs.builders.task.ScriptTask;
import com.atlassian.bamboo.specs.builders.task.TestParserTask;
import com.atlassian.bamboo.specs.builders.task.VcsCheckoutTask;
import com.atlassian.bamboo.specs.builders.trigger.RepositoryPollingTrigger;
import com.atlassian.bamboo.specs.model.task.TestParserTaskProperties;
import com.atlassian.bamboo.specs.util.BambooServer;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

@BambooSpec
public class WireMockMavenPluginSpec {

    private static final BambooKey PROJECT_KEY = new BambooKey("WMP");
    private static final BambooKey PLAN_KEY = new BambooKey("TEST");
    private static final String REPO_NAME = "wiremock-maven-plugin";
    private static final String PROJECT_NAME = "WireMock Maven Plugin";
    private static final String AUTO_GENERATION_WARNING = "Item generated automatically from Bamboo Spec. Any manual changes will be lost when it gets autogenerated again.";

    public static void main(String[] args) {
        WireMockMavenPluginSpec spec = new WireMockMavenPluginSpec();
        BambooServer bambooServer = new BambooServer(getServerUrl());

        GitRepository gitRepository = spec.getRepository();
        bambooServer.publish(gitRepository);

        Plan plan = spec.getPlan();
        bambooServer.publish(plan);

        PlanPermissions planPermissions = spec.getPermissions();
        bambooServer.publish(planPermissions);
    }

    Plan getPlan() {
        String planName = String.format("%s - Test", PROJECT_NAME);
        return new Plan(createProject(), planName, PLAN_KEY)
                .description(AUTO_GENERATION_WARNING)
                .stages(createStage())
                .linkedRepositories(REPO_NAME)
                .planBranchManagement(
                        new PlanBranchManagement()
                                .createForVcsBranch()
                                .delete(
                                        new BranchCleanup()
                                                .whenRemovedFromRepository(true)
                                                .whenRemovedFromRepositoryAfterDays(0)
                                )
                )
                .triggers(
                        new RepositoryPollingTrigger()
                                .pollEvery(10, TimeUnit.SECONDS)
                                .description("Poll every 10s")
                );
    }

    private GitRepository getRepository() {
        String repoUrl = String.format("https://github.com/automatictester/%s.git", REPO_NAME);
        return new GitRepository()
                .name(REPO_NAME)
                .url(repoUrl)
                .description(AUTO_GENERATION_WARNING)
                .repositoryViewer(
                        new GitHubRepositoryViewer()
                );
    }

    private Project createProject() {
        return new Project()
                .name(PROJECT_NAME)
                .key(PROJECT_KEY)
                .description(AUTO_GENERATION_WARNING);
    }

    private Stage createStage() {
        String mvnCmd = "./mvnw clean test";
        return new Stage("Test")
                .jobs(new Job("Run tests", "RUN")
                        .tasks(
                                new VcsCheckoutTask()
                                        .addCheckoutOfDefaultRepository()
                                        .cleanCheckout(true),
                                new ScriptTask()
                                        .inlineBody(mvnCmd)
                                        .description(mvnCmd)
                        ).finalTasks(
                                new TestParserTask(TestParserTaskProperties.TestType.JUNIT)
                                        .resultDirectories("target/surefire-reports/junitreports/*.xml")
                        ).cleanWorkingDirectory(true)
                );
    }

    private PlanPermissions getPermissions() {
        return new PlanPermissions(PROJECT_KEY, PLAN_KEY)
                .permissions(
                        new Permissions()
                                .userPermissions("irek", PermissionType.ADMIN)
                );
    }

    private static String getServerUrl() {
        try (InputStream input = WireMockMavenPluginSpec.class.getClassLoader().getResourceAsStream("bamboo.properties")) {
            Properties props = new Properties();
            props.load(input);
            return props.getProperty("server.url");
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
